<?xml version="1.0" encoding="UTF-8" ?>

<ContentPage
    x:Class="ICU.Planner.Pages.PatientOverviewPage"
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:prism="http://prismlibrary.com"
    xmlns:controls="clr-namespace:ICU.Planner.Controls"
    xmlns:converters="clr-namespace:ICU.Planner.Converters"
    xmlns:xct="http://xamarin.com/schemas/2020/toolkit"
    xmlns:viewModels="clr-namespace:ICU.Planner.ViewModels;assembly=ICU.Planner"
    xmlns:models="clr-namespace:ICU.Data.Models;assembly=ICU.Data.Models"
    x:Name="this"
    Title="{Binding Title}"
    IsBusy="{Binding IsBusy}"
    x:DataType="viewModels:PatientOverviewPageViewModel" >

    <ContentPage.Resources>
        <converters:TestConverter x:Key="testConverter" />
    </ContentPage.Resources>

    <ScrollView x:Name="pageScrollView" >
        <StackLayout
            x:Name="pageContentContainer"
            Padding="5,15"
            Orientation="Vertical"
            Spacing="15" >

            <!--  Patient Info  -->
            <Frame
                Padding="0"
                BackgroundColor="White"
                HasShadow="True" >
                <xct:Expander
                    x:Name="personalInfoExpander"
                    ForceUpdateSizeCommand="{Binding PersonalInfoForceUpdateSizeCommand}"
                    IsExpanded="{Binding PersonalInfoViewIsExpanded}" >

                    <xct:Expander.Header>
                        <Grid
                            Padding="15,20"
                            ColumnDefinitions="*,Auto" >
                            <Label
                                FontFamily="RM"
                                Text="Personal Information" />

                            <controls:ExpanderIconView
                                Grid.Column="1"
                                IsExpanded="{Binding IsExpanded, Source={Reference personalInfoExpander}}" />

                        </Grid>
                    </xct:Expander.Header>

                    <StackLayout
                        Padding="5"
                        Orientation="Vertical"
                        Spacing="5" >

                        <controls:PatientView
                            IsEnabled="False"
                            Patient="{Binding Patient}" />

                        <!--  Button is displayed when expander is collapsed  -->
                        <Button
                            Command="{Binding EditPatientCommand}"
                            Style="{StaticResource EditButtonStyle}"
                            Text="Edit Personal Information" />

                    </StackLayout>
                </xct:Expander>

            </Frame>

            <!--  Main Goal  -->
            <Frame
                Padding="0"
                BackgroundColor="White"
                HasShadow="True" >

                <xct:Expander
                    x:Name="mainGoalExpander"
                    ForceUpdateSizeCommand="{Binding MainGoalForceUpdateSizeCommand}"
                    IsExpanded="{Binding MainGoalViewIsExpanded}" >

                    <xct:Expander.Header>
                        <Grid
                            Padding="15,20"
                            ColumnDefinitions="*,Auto" >

                            <Label
                                FontFamily="RM"
                                Text="Main Goal" />

                            <controls:ExpanderIconView
                                Grid.Column="1"
                                IsExpanded="{Binding IsExpanded, Source={Reference mainGoalExpander}}" />

                        </Grid>
                    </xct:Expander.Header>

                    <StackLayout
                        Padding="5"
                        Orientation="Vertical"
                        Spacing="5" >

                        <Grid ColumnDefinitions="*,Auto" >

                            <Label Text="{Binding Patient.MainGoal.Value}" />

                            <!--  Display the Remove button only when a Main Goal is present  -->
                            <Button
                                Grid.Column="1"
                                Command="{Binding DeleteGoalCommand}"
                                CommandParameter="{Binding Patient.MainGoal}"
                                IsVisible="{Binding Patient.MainGoal, Converter={xct:IsNotNullOrEmptyConverter}}"
                                Style="{StaticResource IconDeleteButtonStyle}" />

                        </Grid>

                        <!--  Label for when no Main Goal is present  -->
                        <Label
                            HorizontalOptions="Center"
                            HorizontalTextAlignment="Center"
                            IsVisible="{Binding Patient.MainGoal, Converter={xct:IsNullOrEmptyConverter}}"
                            Text="No main goal found." />

                        <Button
                            Command="{Binding AddMainGoalCommand}"
                            Style="{StaticResource AddButtonStyle}"
                            Text="Add Main Goal" />
                    </StackLayout>
                </xct:Expander>
            </Frame>

            <!--  Mini Goals  -->
            <Frame
                Padding="0"
                BackgroundColor="White"
                HasShadow="True" >
                <xct:Expander
                    x:Name="miniGoalsExpander"
                    ForceUpdateSizeCommand="{Binding MiniGoalsForceUpdateSizeCommand}"
                    IsExpanded="{Binding MiniGoalsViewIsExpanded}" >

                    <xct:Expander.Header>
                        <Grid
                            Padding="15,20"
                            ColumnDefinitions="*,Auto" >

                            <Label
                                FontFamily="RM"
                                Text="Mini Goals" />

                            <controls:ExpanderIconView
                                Grid.Column="1"
                                IsExpanded="{Binding IsExpanded, Source={Reference miniGoalsExpander}}" />

                        </Grid>
                    </xct:Expander.Header>

                    <StackLayout
                        Padding="5"
                        Orientation="Vertical"
                        Spacing="5" >

                        <StackLayout
                            BindableLayout.ItemsSource="{Binding Patient.MiniGoals}"
                            Spacing="5" >

                            <BindableLayout.EmptyView>
                                <Label Text="No mini goals found." />
                            </BindableLayout.EmptyView>

                            <BindableLayout.ItemTemplate>
                                <DataTemplate x:DataType="models:Goal" >
                                    <Grid ColumnDefinitions="*,Auto" >
                                        <Label Text="{Binding Value}" />
                                        <Button
                                            Grid.Column="1"
                                            Command="{Binding BindingContext.DeleteGoalCommand, Source={RelativeSource Mode=FindAncestor, AncestorType={Type ContentPage}}}"
                                            CommandParameter="{Binding}"
                                            Style="{StaticResource IconDeleteButtonStyle}" />
                                    </Grid>
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>

                        </StackLayout>

                        <Button
                            Command="{Binding AddGoalCommand}"
                            Style="{StaticResource AddButtonStyle}"
                            Text="Add Mini Goal" />
                    </StackLayout>
                </xct:Expander>
            </Frame>

            <!--  CPAX  -->
            <Frame
                Padding="0"
                BackgroundColor="White"
                HasShadow="True" >

                <xct:Expander
                    ExpandAnimationLength="0"
                    x:Name="cpaxExpander"
                    ForceUpdateSizeCommand="{Binding CpaxForceUpdateSizeCommand}"
                    IsExpanded="{Binding CpaxViewIsExpanded}" >

                    <xct:Expander.Header>
                        <Grid
                            Padding="15,20"
                            ColumnDefinitions="*,Auto" >
                            <Label
                                FontFamily="RM"
                                Text="CPAX" />

                            <controls:ExpanderIconView
                                Grid.Column="1"
                                IsExpanded="{Binding IsExpanded, Source={Reference cpaxExpander}}" />

                        </Grid>
                    </xct:Expander.Header>

                    <StackLayout
                        Padding="5"
                        Orientation="Vertical"
                        Spacing="25" >

                        <Button
                            Command="{Binding SaveCpaxCommand}"
                            Style="{StaticResource SaveButtonStyle}"
                            Text="Save CPAX values" />

                        <controls:CpaxView
                            CurrentCpax="{Binding Patient.CurrentCPAX}"
                            GoalCpax="{Binding Patient.GoalCPAX}" />

                        <Button
                            Command="{Binding SaveCpaxCommand}"
                            Style="{StaticResource SaveButtonStyle}"
                            Text="Save CPAX values" />

                    </StackLayout>
                </xct:Expander>

            </Frame>

            <!--  Images by category  -->
            <StackLayout
                BindableLayout.ItemsSource="{Binding Patient.Images}"
                Spacing="15" >
                <BindableLayout.ItemTemplate>
                    <DataTemplate x:DataType="models:ImageCategoryWithFiles" >
                        <!--  Image Category  -->
                        <Frame
                            Padding="0"
                            BackgroundColor="White"
                            HasShadow="True" >

                            <xct:Expander
                                x:Name="imagesExpander"
                                ExpandAnimationLength="0" >
                                <xct:Expander.Header>

                                    <Grid
                                        Padding="15,20"
                                        ColumnDefinitions="*,Auto" >

                                        <Label
                                            FontFamily="RM"
                                            Text="{Binding Name}" />

                                        <controls:ExpanderIconView
                                            Grid.Column="1"
                                            IsExpanded="{Binding IsExpanded, Source={Reference imagesExpander}}" />

                                    </Grid>
                                </xct:Expander.Header>

                                <!--  images for current category  -->
                                <StackLayout
                                    Padding="5"
                                    Orientation="Vertical"
                                    Spacing="5" >
                                    <FlexLayout
                                        AlignItems="Start"
                                        BindableLayout.ItemsSource="{Binding ImageFiles}"
                                        Direction="Row"
                                        HorizontalOptions="Fill"
                                        JustifyContent="SpaceAround"
                                        Wrap="Wrap" >

                                        <BindableLayout.EmptyView>
                                            <Label Text="No images found." />
                                        </BindableLayout.EmptyView>

                                        <BindableLayout.ItemTemplate>
                                            <DataTemplate x:DataType="models:ImageFile" >
                                                <!--  Image  -->
                                                <Frame
                                                    Margin="4"
                                                    Padding="4"
                                                    BorderColor="LightGray" >

                                                    <AbsoluteLayout
                                                        HeightRequest="{OnIdiom Default=250,
                                                                                Phone=150}"
                                                        WidthRequest="{OnIdiom Default=250,
                                                                               Phone=150}" >
                                                        <Image
                                                            AbsoluteLayout.LayoutBounds="0,0,1,1"
                                                            AbsoluteLayout.LayoutFlags="All"
                                                            Aspect="AspectFill"
                                                            Source="{Binding Uri}" />

                                                        <Button
                                                            AbsoluteLayout.LayoutBounds=".90,.90,50,50 "
                                                            AbsoluteLayout.LayoutFlags="PositionProportional"
                                                            Command="{Binding BindingContext.DeleteImageCommand, Source={Reference this}}"
                                                            CommandParameter="{Binding}"
                                                            Style="{StaticResource IconDeleteButtonStyle}" />

                                                    </AbsoluteLayout>
                                                </Frame>
                                            </DataTemplate>
                                        </BindableLayout.ItemTemplate>
                                    </FlexLayout>
                                    <Button
                                        Grid.Column="1"
                                        Command="{Binding BindingContext.AddImageCommand, Source={RelativeSource Mode=FindAncestor, AncestorType={Type ContentPage}}}"
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource AddButtonStyle}" />
                                </StackLayout>

                            </xct:Expander>
                        </Frame>
                    </DataTemplate>
                </BindableLayout.ItemTemplate>

            </StackLayout>

            <!--  Exercises by category  -->
            <Frame
                Padding="0"
                BackgroundColor="White"
                HasShadow="True" >

                <xct:Expander
                    ExpandAnimationLength="0"
                    x:Name="exercisesExpander"
                    ForceUpdateSizeCommand="{Binding ExercisesForceUpdateSizeCommand}"
                    IsExpanded="{Binding ExercisesViewIsExpanded}" >

                    <xct:Expander.Header>

                        <Grid
                            Padding="15,20"
                            ColumnDefinitions="*,Auto" >

                            <Label
                                FontFamily="RM"
                                Text="Treatment Plan" />

                            <controls:ExpanderIconView
                                Grid.Column="1"
                                IsExpanded="{Binding IsExpanded, Source={Reference exercisesExpander}}" />

                        </Grid>
                    </xct:Expander.Header>

                    <StackLayout
                        Spacing="10"
                        Orientation="Vertical"
                        BackgroundColor="{StaticResource PageBackgroundColor}"
                        Margin="5,0" >

                        <!-- Exercises lists -->
                        <StackLayout
                            BindableLayout.ItemsSource="{Binding ExerciseCategories }"
                            Spacing="15" >

                            <BindableLayout.ItemTemplate>
                                <DataTemplate x:DataType="models:ExerciseCategory" >
                                    <!--  Exercise Category  -->

                                    <StackLayout
                                        BackgroundColor="White"
                                        Spacing="5"
                                        Margin="5" >

                                        <!-- Category Name -->
                                        <Label
                                            Text="{Binding Name, StringFormat='{0} Exercises'}"
                                            FontFamily="RM"
                                            FontSize="Header"
                                            Padding="10"
                                            HorizontalTextAlignment="Start"
                                            HorizontalOptions="Fill"
                                            BackgroundColor="WhiteSmoke"/>

                                        <!--  Exercises for current category  -->
                                        <StackLayout
                                            BindingContext="{Binding Exercises}"
                                            BindingContextChanged="ExercisesListContainer_OnBindingContextChanged"
                                            Padding="5"
                                            Orientation="Vertical"
                                            Spacing="5" >

                                            <!-- The content is set in code behind -->
                                        </StackLayout>
                                    </StackLayout>

                                </DataTemplate>
                            </BindableLayout.ItemTemplate>

                        </StackLayout>

                        <!-- Scheduler -->
                        <!-- Use another layout to remove spacing between elements -->
                        <StackLayout Orientation="Vertical" Spacing="0" >
                            <Label Text="Exercises Start Date:" />
                            <DatePicker Format="ddd, dd MMMM yyyy" />
                            <Label
                                Text="This date will be used by the patient's partner app for sending exercise reminders."
                                FontSize="Micro" />
                        </StackLayout>

                        <FlexLayout
                            JustifyContent="SpaceAround"
                            Direction="Row" >

                            <!-- Set to Week by default -->
                            <RadioButton
                                Value="True"
                                Content="Same time each day"
                                IsChecked="{Binding ScheduleExercisesByWeek}" />

                            <RadioButton
                                Value="False"
                                Content="Separate Time"
                                IsChecked="{Binding ScheduleExercisesByWeek, Converter={xct:InvertedBoolConverter}}" />
                        </FlexLayout>

                        <!-- Binding time - translate date to int? use a Converter? -->
                        <TimePicker
                            Time="{Binding Patient.MondayExerciseTime, Converter={converters:TimespanMinutesConverter}, Mode=TwoWay}"
                            Format="HH:mm"
                            IsVisible="{Binding ScheduleExercisesByWeek}" />

                        <Grid
                            HorizontalOptions="Center"
                            ColumnDefinitions="1*,1*"
                            RowDefinitions="1*,1*,1*,1*,1*,1*,1*"
                            IsVisible="{Binding ScheduleExercisesByWeek, Converter={xct:InvertedBoolConverter}}" >

                            <Grid.Resources>
                                <Style
                                    TargetType="TimePicker" >
                                    <Setter Property="Grid.Column" Value="1" />
                                    <Setter Property="Format" Value="HH:mm" />
                                </Style>
                            </Grid.Resources>
                            <Label Text="Monday" Grid.Row="0" />
                            <TimePicker
                                Grid.Row="0"
                                Time="{Binding Patient.MondayExerciseTime, Converter={converters:TimespanMinutesConverter}}" />

                            <Label Text="Tuesday" Grid.Row="1" />
                            <TimePicker
                                Time="{Binding Patient.TuesdayExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="1" />

                            <Label Text="Wednesday" Grid.Row="2" />
                            <TimePicker
                                Time="{Binding Patient.WednesdayExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="2" />

                            <Label Text="Thursday" Grid.Row="3" />
                            <TimePicker
                                Time="{Binding Patient.ThursdayExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="3" />

                            <Label Text="Friday" Grid.Row="4" />
                            <TimePicker
                                Time="{Binding Patient.FridayExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="4" />

                            <Label Text="Saturday" Grid.Row="5" />
                            <TimePicker
                                Time="{Binding Patient.SaturdayExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="5" />

                            <Label Text="Sunday" Grid.Row="6" />
                            <TimePicker
                                Time="{Binding Patient.SunExerciseTime, Converter={converters:TimespanMinutesConverter}}"
                                Grid.Row="6" />

                        </Grid>

                        <Button
                            Command="{Binding UpdatePlanCommand}"
                            Text="Save Plan"
                            Style="{StaticResource SaveButtonStyle}" />
                    </StackLayout>
                </xct:Expander>
            </Frame>

        </StackLayout>
    </ScrollView>
</ContentPage>
